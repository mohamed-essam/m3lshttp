// Code generated by mockery v1.0.0. DO NOT EDIT.
package m3lshttp

import mock "github.com/stretchr/testify/mock"

// ParamsMock is an autogenerated mock type for the ParamsMock type
type ParamsMock struct {
	mock.Mock
}

// addObject provides a mock function with given fields: key, value
func (_m *ParamsMock) addObject(key string, value string) {
	_m.Called(key, value)
}

// AsDouble provides a mock function with given fields:
func (_m *ParamsMock) AsDouble() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// AsFloat provides a mock function with given fields:
func (_m *ParamsMock) AsFloat() float32 {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// AsInteger provides a mock function with given fields:
func (_m *ParamsMock) AsInteger() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AsLong provides a mock function with given fields:
func (_m *ParamsMock) AsLong() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// AsString provides a mock function with given fields:
func (_m *ParamsMock) AsString() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Double provides a mock function with given fields:
func (_m *ParamsMock) Double() float64 {
	ret := _m.Called()

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Float provides a mock function with given fields:
func (_m *ParamsMock) Float() float32 {
	ret := _m.Called()

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// GetArray provides a mock function with given fields: idx
func (_m *ParamsMock) GetArray(idx int) ParamsMock {
	ret := _m.Called(idx)

	var r0 ParamsMock
	if rf, ok := ret.Get(0).(func(int) ParamsMock); ok {
		r0 = rf(idx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ParamsMock)
		}
	}

	return r0
}

// GetObject provides a mock function with given fields: name
func (_m *ParamsMock) GetObject(name string) ParamsMock {
	ret := _m.Called(name)

	var r0 ParamsMock
	if rf, ok := ret.Get(0).(func(string) ParamsMock); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ParamsMock)
		}
	}

	return r0
}

// Integer provides a mock function with given fields:
func (_m *ParamsMock) Integer() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Long provides a mock function with given fields:
func (_m *ParamsMock) Long() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Object provides a mock function with given fields:
func (_m *ParamsMock) Object() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *ParamsMock) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Code generated by mockery v1.0.0. DO NOT EDIT.
package m3lshttp

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/valyala/fasthttp"
)

// RequestMock is an autogenerated mock type for the RequestMock type
type RequestMock struct {
	mock.Mock
}

// popPathParam provides a mock function with given fields:
func (_m *RequestMock) popPathParam() {
	_m.Called()
}

// pushPathParam provides a mock function with given fields: name, value
func (_m *RequestMock) pushPathParam(name string, value string) {
	_m.Called(name, value)
}

// Body provides a mock function with given fields:
func (_m *RequestMock) Body() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ContentType provides a mock function with given fields:
func (_m *RequestMock) ContentType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Method provides a mock function with given fields:
func (_m *RequestMock) Method() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MultipartForm provides a mock function with given fields:
func (_m *RequestMock) MultipartForm() map[string][]string {
	ret := _m.Called()

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

// Params provides a mock function with given fields:
func (_m *RequestMock) Params() Params {
	ret := _m.Called()

	var r0 Params
	if rf, ok := ret.Get(0).(func() Params); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Params)
		}
	}

	return r0
}

// Path provides a mock function with given fields:
func (_m *RequestMock) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Path provides a mock function with given fields:
func (_m *RequestMock) context() *fasthttp.RequestCtx {
	ret := _m.Called()

	var r0 *fasthttp.RequestCtx
	if rf, ok := ret.Get(0).(func() *fasthttp.RequestCtx); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(*fasthttp.RequestCtx)
	}

	return r0
}
